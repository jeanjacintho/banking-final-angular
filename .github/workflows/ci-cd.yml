name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Cache Node.js dependencies
      uses: actions/cache@v3
      with:
        path: web/node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('web/package-lock.json') }}
        restore-keys: ${{ runner.os }}-node-
    
    - name: Install frontend dependencies
      run: |
        cd web
        npm install
    
    - name: Run frontend tests
      run: |
        cd web
        npm run test -- --watch=false --browsers=ChromeHeadless
    
    - name: Build frontend
      run: |
        cd web
        npm run build
    
    - name: Run backend tests
      run: |
        cd api
        ./mvnw test -Dspring.datasource.url=jdbc:postgresql://localhost:5432/testdb
      env:
        SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/testdb
        SPRING_DATASOURCE_USERNAME: postgres
        SPRING_DATASOURCE_PASSWORD: postgres
    
    - name: Build backend
      run: |
        cd api
        ./mvnw clean package -DskipTests

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to Render
      run: |
        npm install -g @render/cli
        render deploy --config infra/render/render.yaml
      env:
        RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
